from flask import Blueprint, request, jsonify
from openai import OpenAI
from models import Employee
from database import db
from flask_jwt_extended import jwt_required, get_jwt_identity
import os

bp_motivation = Blueprint("motivation", __name__)

# ‚úÖ OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ AI
@bp_motivation.route("/motivation", methods=["POST"])
def get_motivation():
    data = request.json
    emp_id = data.get("id")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if emp_id:
            employee = Employee.query.get(emp_id)
            if not employee:
                return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        else:
            employee = Employee()

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –∑–∞–¥–∞–µ–º –ø–æ–ª—è
        employee.name = data["name"]
        employee.role = data["role"]
        employee.team_id = data["team_id"]
        employee.stress = data["stress"]
        employee.communication = data["communication"]
        employee.behavior = data["behavior"]
        employee.feedback = data["feedback"]

        db.session.add(employee)
        db.session.commit()

        # 3. Prompt –∫ OpenAI
        prompt = f"""–¢—ã Agile-–∫–æ—É—á –∏ DISC-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –ø–æ DISC –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é, –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å—Ç—Ä–æ–≥–æ HTML, –∏—Å–ø–æ–ª—å–∑—É–π <h3>, <ul>, <li>, <strong> –∏ —Ç.–¥..

–ò–º—è: {employee.name}
–†–æ–ª—å: {employee.role}
–ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏: {employee.stress}
–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏: {employee.communication}
–†–∞–±–æ—á–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {employee.behavior}
–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {employee.feedback}


**–¢–∏–ø DISC:** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–∞–ª–∏—Ç–∏–∫) –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å—Ç—Ä–æ–≥–æ HTML, –∏—Å–ø–æ–ª—å–∑—É–π <h3>, <ul>, <li>, <strong> –∏ —Ç.–¥ –í—ã–¥–µ–ª–∏ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–æ–π
**–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**
... –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–≤—ã—Å–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ.....
**–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã:**
...
**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:**
...
"""

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –∫–æ—É—á, –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ DISC-–∞–Ω–∞–ª–∏—Ç–∏–∫."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        result_text = response.choices[0].message.content

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç AI
        employee.ai_analysis = result_text
        db.session.commit()

        return jsonify({
            "employee_id": employee.id,
            "analysis": result_text
        })

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500



# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@bp_motivation.route("/employees", methods=["GET"])
def get_employees():
    employees = Employee.query.all()
    return jsonify([{
        "id": e.id,
        "name": e.name,
        "role": e.role,
        "team_id": e.team_id,
        "stress": e.stress,
        "communication": e.communication,
        "behavior": e.behavior,
        "feedback": e.feedback,
        "created_at": e.created_at.isoformat() if e.created_at else None,
        "team_name": e.team.name if e.team else None,
        "ai_analysis": e.ai_analysis
    } for e in employees])


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@bp_motivation.route("/employees", methods=["POST"])
def save_employee():
    data = request.json
    emp_id = data.get("id")

    employee = Employee.query.get(emp_id) if emp_id else Employee()

    if not employee and emp_id:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    employee.name = data.get("name")
    employee.role = data.get("role")
    employee.team_id = data.get("team_id") or None
    employee.stress = data.get("stress")
    employee.communication = data.get("communication")
    employee.behavior = data.get("behavior")
    employee.feedback = data.get("feedback")

    db.session.add(employee)
    db.session.commit()
    return jsonify({"message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "id": employee.id})


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
@bp_motivation.route("/employee/<int:employee_id>", methods=["GET"])
def get_employee(employee_id):
    employee = Employee.query.get(employee_id)

    if not employee:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    return jsonify({
        "id": employee.id,
        "name": employee.name,
        "role": employee.role,
        "team_id": employee.team_id,
        "stress": employee.stress,
        "communication": employee.communication,
        "behavior": employee.behavior,
        "feedback": employee.feedback,
        "ai_analysis": employee.ai_analysis,
        "created_at": employee.created_at.isoformat() if employee.created_at else None
    })
@bp_motivation.route("/employee/<int:employee_id>", methods=["DELETE"])
def delete_employee(employee_id):
    employee = Employee.query.get(employee_id)
    if not employee:
        return jsonify({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    db.session.delete(employee)
    db.session.commit()
    return jsonify({"message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω"})