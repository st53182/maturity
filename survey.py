import json
from flask import Blueprint, request, jsonify, session
from flask_jwt_extended import jwt_required, get_jwt_identity
from database import db
from models import Question, Assessment, Team
from flask import current_app
from datetime import datetime



bp_survey = Blueprint('survey', __name__)

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
@bp_survey.route('/create_team', methods=['POST'])
@jwt_required()
def create_team():
    try:
        print(f"üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {request.json}")  # üîπ –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞

        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å JSON"}), 400

        user_id = get_jwt_identity()
        team_name = data.get("team_name")

        if not team_name:
            return jsonify({"error": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_team = Team.query.filter_by(name=team_name, user_id=user_id).first()
        if existing_team:
            return jsonify({"error": "–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}), 409  # 409 - Conflict

        # üîπ –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
        new_team = Team(name=team_name, user_id=user_id, created_at=datetime.utcnow())

        db.session.add(new_team)
        db.session.commit()

        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞! ID: {new_team.id}")

        return jsonify({"message": "–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!", "team_id": new_team.id}), 201

    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@bp_survey.route('/questions', methods=['GET'])
def get_questions():
    try:
        questions = Question.query.all()

        response = [{
            "id": q.id,
            "category": q.category,
            "subcategory": q.subcategory,
            "question": q.question,
            "levels": {
                "basic": q.level_basic,
                "transitional": q.level_transitional,
                "growing": q.level_growing,
                "normalization": q.level_normalization,
                "optimal": q.level_optimal,
            }
        } for q in questions]

        return current_app.response_class(
            response=json.dumps(response, ensure_ascii=False),  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º ASCII
            status=200,
            mimetype='application/json'
        )

    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", "details": str(e)}), 500

SCORE_MAP = {
    "basic": 1,
    "transitional": 2,
    "growing": 3,
    "normalization": 4,
    "optimal": 5
}
# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∫–æ–º–∞–Ω–¥—ã
@bp_survey.route('/submit_assessment', methods=['POST'])
@jwt_required()
def submit_assessment():
    data = request.json
    user_id = get_jwt_identity()
    team_id = data.get("team_id")
    answers = data.get("answers")

    if not team_id or not answers:
        return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç—ã"}), 400

    last_assessment_id = None

    for q_id, score in answers.items():
        numeric_score = SCORE_MAP.get(score)  # ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
        if numeric_score is None:
            return jsonify({"error": f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏: {score}"}), 400

        assessment = Assessment(
            user_id=user_id,
            team_id=team_id,
            question_id=q_id,
            score=numeric_score
        )
        db.session.add(assessment)
        db.session.flush()  # üëà –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å ID –¥–æ –∫–æ–º–º–∏—Ç–∞
        last_assessment_id = assessment.id

    db.session.commit()

    return jsonify({
        "message": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        "assessment_id": last_assessment_id  # üëà –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID
    })


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
@bp_survey.route('/team_progress/<int:team_id>', methods=['GET'])
@jwt_required()
def get_team_progress(team_id):
    assessments = (
        db.session.query(
            Question.category,
            Question.question,
            db.func.avg(Assessment.score).label("average_score")
        )
        .join(Assessment, Question.id == Assessment.question_id)
        .filter(Assessment.team_id == team_id)
        .group_by(Question.category, Question.question)
        .all()
    )

    result = []
    for category, question, avg_score in assessments:
        result.append({
            "category": category,
            "question": question,
            "average_score": float(avg_score)
        })

    return jsonify(result)


@bp_survey.route('/user_teams', methods=['GET'])
@jwt_required()
def get_user_teams():
    user_id = get_jwt_identity()
    
    latest_assessment_subquery = (
        db.session.query(
            Assessment.team_id,
            db.func.max(Assessment.created_at).label('max_created_at')
        )
        .filter_by(user_id=user_id)
        .group_by(Assessment.team_id)
        .subquery()
    )
    
    teams_with_assessments = (
        db.session.query(Team, Assessment.id.label('latest_assessment_id'))
        .filter_by(user_id=user_id)
        .outerjoin(
            latest_assessment_subquery,
            Team.id == latest_assessment_subquery.c.team_id
        )
        .outerjoin(
            Assessment,
            db.and_(
                Assessment.team_id == Team.id,
                Assessment.user_id == user_id,
                Assessment.created_at == latest_assessment_subquery.c.max_created_at
            )
        )
        .all()
    )
    
    team_data = []
    for team, latest_assessment_id in teams_with_assessments:
        team_data.append({
            "id": team.id,
            "name": team.name,
            "latest_assessment_id": latest_assessment_id
        })
    
    return jsonify(team_data)
@bp_survey.route("/assessment/<int:assessment_id>/recommendations", methods=["GET"])
@jwt_required()
def get_recommendations(assessment_id):
    assessment = Assessment.query.get(assessment_id)
    if assessment and assessment.recommendations:
        return jsonify({"recommendations": assessment.recommendations})
    return jsonify({"recommendations": None}), 200

@bp_survey.route('/team_average/<int:team_id>', methods=['GET'])
@jwt_required()
def get_team_average(team_id):
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        avg_score = db.session.query(db.func.avg(Assessment.score)) \
                              .filter(Assessment.team_id == team_id) \
                              .scalar()
        if avg_score is None:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."}), 404

        # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return jsonify({"average_score": round(avg_score, 2)})
    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏", "details": str(e)}), 500

@bp_survey.route('/team_results/<int:team_id>', methods=['GET'])
@jwt_required()
def get_team_results(team_id):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        team = Team.query.get(team_id)
        if not team:
            return jsonify({"error": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        assessments = db.session.query(
            Question.category,
            Question.subcategory,
            db.func.avg(Assessment.score).label("average_score")
        ).join(Assessment, Question.id == Assessment.question_id) \
            .filter(Assessment.team_id == team_id) \
            .group_by(Question.category, Question.subcategory, Assessment.created_at) \
            .order_by(Assessment.created_at.desc()) \
            .limit(35) \
            .all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        results = {}
        for category, subcategory, avg_score in assessments:
            if category not in results:
                results[category] = {}
            results[category][subcategory] = round(avg_score, 2)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return jsonify({
            "team_name": team.name,
            "results": results
        })
    except Exception as e:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "details": str(e)}), 500


@bp_survey.route('/temp_results', methods=['POST'])
def save_temp_results():
    """
    Saves the survey results temporarily for unauthenticated users.
    """
    data = request.json
    answers = data.get("answers")

    if not answers:
        return jsonify({"error": "No answers provided"}), 400

    # Store answers in the session (temporary storage)
    session['temp_results'] = answers

    return jsonify({"message": "Results saved temporarily", "temp_id": "guest"}), 200


@bp_survey.route('/temp_results', methods=['GET'])
def get_temp_results():
    """
    Retrieves temporary survey results for unauthenticated users.
    """
    temp_results = session.get('temp_results')
    if not temp_results:
        return jsonify({"error": "No temporary results found"}), 404

    return jsonify(temp_results), 200

@bp_survey.route("/assessment/<int:assessment_id>/recommendations", methods=["POST"])
@jwt_required()
def save_recommendations(assessment_id):
    data = request.json
    recommendations = data.get("recommendations")

    if not recommendations:
        return jsonify({"error": "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"}), 400

    assessment = Assessment.query.get(assessment_id)
    if not assessment:
        return jsonify({"error": "–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    assessment.recommendations = recommendations
    db.session.commit()

    return jsonify({"message": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}), 200


@bp_survey.route('/team_results_history/<int:team_id>', methods=['GET'])
@jwt_required()
def get_team_results_history(team_id):
    user_id = get_jwt_identity()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥—ã (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    assessments = (
        db.session.query(Assessment)
        .filter_by(team_id=team_id, user_id=user_id)
        .order_by(Assessment.created_at.desc())
        .all()
    )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–µ–∫—É–Ω–¥—ã)
    sessions = {}
    for a in assessments:
        session_key = a.created_at.strftime('%Y-%m-%d %H:%M:%S')
        if session_key not in sessions:
            sessions[session_key] = []
        sessions[session_key].append(a)

    # –ë–µ—Ä—ë–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    latest_sessions = dict(sorted(sessions.items(), reverse=True)[:2])

    history = {}

    for session_key, records in latest_sessions.items():
        temp_result = {}
        for a in records:
            category = a.question.category
            subcategory = a.question.subcategory
            if category not in temp_result:
                temp_result[category] = {}
            if subcategory not in temp_result[category]:
                temp_result[category][subcategory] = []
            temp_result[category][subcategory].append(a.score)

        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        averaged = {}
        for category, subs in temp_result.items():
            averaged[category] = {
                sub: round(sum(scores) / len(scores), 2)
                for sub, scores in subs.items()
            }
        history[session_key] = averaged

    return jsonify(history)
