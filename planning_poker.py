from flask import Blueprint, request, jsonify
from database import db
from models import PlanningRoom, Participant, Vote
from datetime import datetime

planning_bp = Blueprint('planning_poker', __name__)


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
@planning_bp.route('/planning-room', methods=['POST'])
def create_room():
    data = request.json
    room_id = data.get("id")
    room = PlanningRoom(id=room_id, name=data['name'])
    db.session.add(room)
    db.session.commit()
    return jsonify({"room_id": room.id})


# üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
@planning_bp.route('/planning-room/<string:room_id>/join', methods=['POST'])
def join_room(room_id):
    try:
        data = request.json
        print(f"[JOIN_ROOM] room_id={room_id}, payload={data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
        room = PlanningRoom.query.get(room_id)
        if not room:
            print(f"[JOIN_ROOM] –ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...")
            room = PlanningRoom(id=room_id, name="–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞", created_at=datetime.utcnow())
            db.session.add(room)
            db.session.commit()
            print(f"[JOIN_ROOM] –ö–æ–º–Ω–∞—Ç–∞ {room_id} —Å–æ–∑–¥–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫
        existing_participant = Participant.query.filter_by(
            name=data['name'],
            role=data['role'],
            room_id=room_id
        ).first()

        if existing_participant:
            print(f"[JOIN_ROOM] –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_participant.id} {existing_participant.name}")
            return jsonify({"participant_id": existing_participant.id})

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant(
            name=data['name'],
            role=data['role'],
            room_id=room_id
        )
        db.session.add(participant)
        db.session.commit()
        print(f"[JOIN_ROOM] –°–æ–∑–¥–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {participant.id} {participant.name} ({participant.role})")

        return jsonify({"participant_id": participant.id})

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@planning_bp.route('/planning-room/<string:room_id>/participants', methods=['GET'])
def get_participants(room_id):
    try:
        participants = Participant.query.filter_by(room_id=room_id).all()
        votes = Vote.query.filter_by(room_id=room_id).all()
        vote_map = {vote.participant_id: vote.points for vote in votes}

        result = []
        for p in participants:
            result.append({
                "id": p.id,
                "name": p.name,
                "role": p.role,
                "voted": p.id in vote_map,
                "points": vote_map.get(p.id)
            })

        return jsonify({"participants": result})

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
@planning_bp.route('/planning-room/<string:room_id>/vote', methods=['POST'])
def vote(room_id):
    try:
        data = request.json
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å –æ—Ç —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        existing_vote = Vote.query.filter_by(
            participant_id=data['participant_id'],
            room_id=room_id,
            story=data['story']
        ).first()

        if existing_vote:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å
            existing_vote.points = data['points']
            existing_vote.created_at = datetime.utcnow()
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
            new_vote = Vote(
                story=data['story'],
                points=data['points'],
                participant_id=data['participant_id'],
                room_id=room_id,
                created_at=datetime.utcnow()
            )
            db.session.add(new_vote)

        db.session.commit()
        return jsonify({"status": "ok"})

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500
