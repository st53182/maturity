from flask import Blueprint, request, jsonify
from openai import OpenAI
from models import Assessment
from database import db
from flask_jwt_extended import jwt_required, get_jwt_identity
import os

bp_assessment = Blueprint("assessment", __name__)

@bp_assessment.route("/openai_recommend", methods=["POST"])
def openai_recommendations():
    from openai import OpenAI

    data = request.json
    plan = data.get("plan", [])
    lang = data.get("lang", "ru")

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    if not plan:
        error_msg = "Plan not provided" if lang == 'en' else "–ü–ª–∞–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"
        return jsonify({"error": error_msg}), 400

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–ª–∞–Ω–∞
    plan_text = "\n".join([f"{idx+1}. {step['text']}" for idx, step in enumerate(plan)])

    if lang == 'en':
        prompt = f"""
You are an experienced Agile coach. Based on the following team maturity improvement plan, provide detailed personalized recommendations for each plan element.

Plan:
{plan_text}
Use structured HTML where each recommendation is a new paragraph
Recommendations should not simply repeat the plan element, but should make it more detailed and specific, so it becomes immediately clear how to implement it
Response format:
1. Recommendation ‚Äî [short title]
Recommendations: [detailed, tools, roles, links]

2. Recommendation ‚Äî ...
...
"""
    else:
        prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π Agile-–∫–æ—É—á. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–Ω–æ–π –∑—Ä–µ–ª–æ—Å—Ç–∏ –¥–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–ª–∞–Ω–∞.

–ü–ª–∞–Ω:
{plan_text}
–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTMl –≥–¥–µ –∫–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–ª–∞–Ω–∞, –∞ –¥–æ–ª–∂–Ω—ã –µ–≥–æ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º, –¥–µ—Ç–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Äî [–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–¥–µ—Ç–∞–ª—å–Ω–æ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ä–æ–ª–∏, —Å—Å—ã–ª–∫–∏]

2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è  ‚Äî ...
...
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã Agile-–∫–æ—É—á, —Å–æ–∑–¥–∞—é—â–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )

        content = response.choices[0].message.content
        return jsonify({"content": content})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@bp_assessment.route("/assessment/<int:assessment_id>/plan", methods=["GET"])
@jwt_required()
def get_improvement_plan(assessment_id):
    assessment = Assessment.query.get(assessment_id)
    if not assessment:
        return jsonify({"error": "Assessment not found"}), 404

    return jsonify({"plan": assessment.plan or []})

@bp_assessment.route("/assessment/<int:assessment_id>/plan", methods=["POST"])
@jwt_required()
def save_improvement_plan(assessment_id):
    data = request.get_json()
    plan = data.get("plan")

    assessment = Assessment.query.get(assessment_id)
    if not assessment:
        return jsonify({"error": "Assessment not found"}), 404

    assessment.plan = plan
    db.session.commit()
    return jsonify({"message": "Plan saved"})

@bp_assessment.route("/generate_plan", methods=["POST"])
def generate_improvement_plan():
    import re
    from openai import OpenAI

    data = request.json
    answer_text = data.get("answer_text")
    assessment_id = data.get("assessment_id")
    lang = data.get("lang", "ru")

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    try:
        if lang == 'en':
            system_content = "You are an experienced Agile coach ‚Äî AI Artem. Help create a detailed team effectiveness improvement plan."
            user_content = f"""
Here are the responses from Agile maturity assessment participants:

{answer_text}

Based on these responses, create a detailed 5-step plan to improve team performance. Each step should be:
- Without HTML. Just plain text without formatting
- With numbering: 1. 2. 3. ...
- Specific
- Briefly formulated (1-2 sentences)
- Following SMART criteria
- Achievable within 3 months
- In instruction format
- If it's about training ‚Äî suggest onagile.ru, but not intrusively
- Use SMART principles
- Preferably in format: what, who and when
- Don't use the word "should" and its variations
"""
        else:
            system_content = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Agile-–∫–æ—É—á ‚Äî –ò–ò –ê—Ä—Ç—ë–º. –ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            user_content = f"""
–í–æ—Ç –æ—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ü–µ–Ω–∫–∏ Agile-–∑—Ä–µ–ª–æ—Å—Ç–∏:

{answer_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 5 —à–∞–≥–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã. –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ë–µ–∑ HTML. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –° –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: 1. 2. 3. ...
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
- –ö—Ä–∞—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ü–æ SMART
- –†–µ–∞–ª–∏–∑—É–µ–º—ã–º –∑–∞ 3 –º–µ—Å—è—Ü–∞
- –í –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ï—Å–ª–∏ —Ä–µ—á—å –∏–¥–µ—Ç –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π onagile.ru, –Ω–æ –±–µ–∑ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π SMART
- –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞
- –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ –¥–æ–ª–∂–µ–Ω –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏
"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": system_content
                },
                {
                    "role": "user",
                    "content": user_content
                }
            ],
            temperature=0.6,
            max_tokens=1500
        )

        raw = response.choices[0].message.content

        # üß† –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: 1. ..., 2. ..., 3. ...
        steps = re.findall(r'\d+\.\s+(.*?)(?=\n\d+\.|\Z)', raw, re.DOTALL)
        structured_steps = [{"text": step.strip(), "done": False} for step in steps if step.strip()]

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ Assessment
        if assessment_id:
            assessment = Assessment.query.get(assessment_id)
            if assessment:
                assessment.plan = structured_steps
                db.session.commit()

        return jsonify({ "steps": structured_steps })

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500
