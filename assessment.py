from flask import Blueprint, request, jsonify
from openai import OpenAI
from models import Assessment  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from database import db        # –ò–º–ø–æ—Ä—Ç SQLAlchemy session
from flask_jwt_extended import jwt_required, get_jwt_identity

bp_assessment = Blueprint("assessment", __name__)

@bp_assessment.route("/openai_recommend", methods=["POST"])
def openai_recommendations():
    from openai import OpenAI

    data = request.json
    plan = data.get("plan", [])

    client = OpenAI(api_key="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")

    if not plan:
        return jsonify({"error": "–ü–ª–∞–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}), 400

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–ª–∞–Ω–∞
    plan_text = "\n".join([f"{idx+1}. {step['text']}" for idx, step in enumerate(plan)])

    prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π Agile-–∫–æ—É—á. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–Ω–æ–π –∑—Ä–µ–ª–æ—Å—Ç–∏ –¥–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.

–ü–ª–∞–Ω:
{plan_text}
–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTMl –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –®–∞–≥ ‚Äî [–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–¥–µ—Ç–∞–ª—å–Ω–æ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ä–æ–ª–∏, —Å—Å—ã–ª–∫–∏]

2. –®–∞–≥ ‚Äî ...
...
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã Agile-–∫–æ—É—á, —Å–æ–∑–¥–∞—é—â–∏–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )

        content = response.choices[0].message.content
        return jsonify({"content": content})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@bp_assessment.route("/assessment/<int:assessment_id>/plan", methods=["GET"])
@jwt_required()
def get_improvement_plan(assessment_id):
    assessment = Assessment.query.get(assessment_id)
    if not assessment:
        return jsonify({"error": "Assessment not found"}), 404

    return jsonify({"plan": assessment.plan or []})

@bp_assessment.route("/assessment/<int:assessment_id>/plan", methods=["POST"])
@jwt_required()
def save_improvement_plan(assessment_id):
    data = request.get_json()
    plan = data.get("plan")

    assessment = Assessment.query.get(assessment_id)
    if not assessment:
        return jsonify({"error": "Assessment not found"}), 404

    assessment.plan = plan
    db.session.commit()
    return jsonify({"message": "Plan saved"})

@bp_assessment.route("/generate_plan", methods=["POST"])
def generate_improvement_plan():
    import re
    from openai import OpenAI

    data = request.json
    answer_text = data.get("answer_text")
    assessment_id = data.get("assessment_id")

    client = OpenAI(api_key="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")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Agile-–∫–æ—É—á ‚Äî –ò–ò –ê—Ä—Ç—ë–º. –ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                },
                {
                    "role": "user",
                    "content": f"""
–í–æ—Ç –æ—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ü–µ–Ω–∫–∏ Agile-–∑—Ä–µ–ª–æ—Å—Ç–∏:

{answer_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 5 —à–∞–≥–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã. –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ë–µ–∑ HTML. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –° –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: 1. 2. 3. ...
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
- –ö—Ä–∞—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ü–æ SMART
- –†–µ–∞–ª–∏–∑—É–µ–º—ã–º –∑–∞ 3 –º–µ—Å—è—Ü–∞
- –í –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ï—Å–ª–∏ —Ä–µ—á—å –∏–¥–µ—Ç –ø—Ä–æ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π onagile.ru, –Ω–æ –±–µ–∑ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π SMART
- –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞
- –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ –¥–æ–ª–∂–µ–Ω –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏
"""
                }
            ],
            temperature=0.6,
            max_tokens=1500
        )

        raw = response.choices[0].message.content

        # üß† –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: 1. ..., 2. ..., 3. ...
        steps = re.findall(r'\d+\.\s+(.*?)(?=\n\d+\.|\Z)', raw, re.DOTALL)
        structured_steps = [{"text": step.strip(), "done": False} for step in steps if step.strip()]

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ Assessment
        if assessment_id:
            assessment = Assessment.query.get(assessment_id)
            if assessment:
                assessment.plan = structured_steps
                db.session.commit()

        return jsonify({ "steps": structured_steps })

    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500
