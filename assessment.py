from flask import Blueprint, request, jsonify
from openai import OpenAI
from models import Assessment  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from database import db        # –ò–º–ø–æ—Ä—Ç SQLAlchemy session

bp_assessment = Blueprint("assessment", __name__)

@bp_assessment.route("/openai_recommend", methods=["POST"])
def openai_recommend():
    data = request.json
    answer_text = data.get("answer_text")
    assessment_id = data.get("assessment_id")  # üÜï

    client = OpenAI(api_key="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")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Agile-–∫–æ—É—á - –ò–ò –ê—Ä—Ç—ë–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ Agile –∑—Ä–µ–ª–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã."
                },
                {
                    "role": "user",
                    "content": f"–û—Ç–≤–µ—Ç—ã:\n{answer_text}\n–ü—Ä–µ–¥–ª–æ–∂–∏ 5 —É–ª—É—á—à–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, –º–µ—Ç–æ–¥–∞–º–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É. . –í–∞–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å —á—Ç–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –≤ agilexpert.ru –î–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä–∞—è—Å—å –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **HTML** —Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞ –≤–ª–µ–≤–æ –∏ —à—Ä–∏—Ñ—Ç–∞–º–∏ –≤–∑—è—Ç—ã–º–∏ —Å agilexpert.ru"
                }
            ],
            temperature=0.7,
            max_tokens=5000
        )

        content = response.choices[0].message.content

        # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ assessment
        if assessment_id:
            assessment = Assessment.query.get(assessment_id)
            if assessment:
                assessment.recommendations = content
                db.session.commit()

        return jsonify({"content": content})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

